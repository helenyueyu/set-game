{"version":3,"sources":["components/Model.js","App.js","index.js"],"names":["array","i","push","index","color","shape","shade","number","colorsArray","shapesArray","shadesArray","filter","x","forEach","idx","length","_loop","j","_loop5","_loop2","k","_loop7","_loop6","_loop3","Math","random","sort","a","b","App","console","log","react_default","createElement","className","Component","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"qHAkBA,2EADIA,SAAQ,IACHC,EAAI,EAAGA,EAAI,GAAIA,IACtBD,EAAME,KAAK,CACTC,MAAO,KACPC,MAAO,KACPC,MAAO,KACPC,MAAO,KACPC,OAAQ,OAYZ,IALA,IAAMC,EAAc,CAAC,MAAO,SAAU,SAChCC,EAAc,CAAC,OAAQ,UAAW,YAClCC,EAAc,CAAC,QAAS,SAAU,SAG/BT,EAAI,EAAGA,EAAI,GAAIA,IAEpBD,EAAMC,GAAGG,MADPH,GAAK,EAAIA,EAAI,GACE,MACRA,GAAK,GAAKA,EAAI,GACN,SAEA,QAKrB,mBAASA,GACPD,EAAMW,OAAO,SAAAC,GAAC,OAAIA,EAAER,QAAUI,EAAYP,KAAIY,QAAQ,SAACD,EAAGE,GAEtDF,EAAEP,MADAS,GAAO,GAAKA,EAAM,EACV,OACDA,GAAO,GAAKA,EAAM,GACjB,UAEA,cAPPb,EAAI,EAAGA,EAAIO,EAAYO,OAAQd,IAAKe,EAApCf,GAaT,mBAASA,GACP,mBAASgB,GACPjB,EAAMW,OAAO,SAAAC,GAAC,OAAIA,EAAER,QAAUI,EAAYP,IAAMW,EAAEP,QAAUI,EAAYQ,KAAIJ,QAAQ,SAACD,EAAGE,GAEpFF,EAAEN,MADAQ,GAAO,GAAKA,EAAM,EACV,QACDA,GAAO,GAAKA,EAAM,EACjB,SAEA,WAPPG,EAAI,EAAGA,EAAIR,EAAYM,OAAQE,IAAKC,EAApCD,IADFhB,EAAI,EAAGA,EAAIO,EAAYO,OAAQd,IAAKkB,EAApClB,GAeT,mBAASA,GACP,mBAASgB,GACP,mBAASG,GACPpB,EAAMW,OAAO,SAAAC,GAAC,OAAIA,EAAER,QAAUI,EAAYP,IAAMW,EAAEP,QAAUI,EAAYQ,IAAML,EAAEN,QAAUI,EAAYU,KAAIP,QAAQ,SAACD,EAAGE,GAElHF,EAAEL,OADQ,IAARO,EACS,EACM,IAARA,EACE,EAEA,KAPRM,EAAI,EAAGA,EAAIV,EAAYK,OAAQK,IAAKC,EAApCD,IADFH,EAAI,EAAGA,EAAIR,EAAYM,OAAQE,IAAKK,EAApCL,IADFhB,EAAI,EAAGA,EAAIO,EAAYO,OAAQd,IAAKsB,EAApCtB,GAiBT,IAAK,IAAIA,EAAI,EAAGA,EAAI,GAAIA,IACtBD,EAAMC,GAAGE,MAAQqB,KAAKC,SAQxB,IAqCezB,EAJfA,EAAQA,EAAM0B,KALA,SAACC,EAAEC,GACf,OAAID,EAAExB,MAAQyB,EAAEzB,OAAe,EAC3BwB,EAAExB,MAAQyB,EAAEzB,MAAc,EACvB,ICnHM0B,mLARX,OADAC,QAAQC,IAAI/B,GAEVgC,EAAAL,EAAAM,cAAA,OAAKC,UAAU,OACZlC,EAAM,GAAGI,cALA+B,aCFlBC,IAASC,OAAOL,EAAAL,EAAAM,cAACK,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.277c1056.chunk.js","sourcesContent":["// Each property is assigned a value from 1 to 3,\n// which correspond to the array\n\n// Check that I divided the colors correctly (testing)\n// array.filter(x => x.color === \"red\").length\n// array.filter(x => x.color === \"purple\").length\n// array.filter(x => x.color === \"green\").length\n\n// currently .forEach() not chainable\n\n// You know what - it probablly has something to do with the .fill() property - the array assumes each element must be identical\n\n// color = [red, purple, green]\n// shape = [oval, diamond, squiggle]\n// shade = [empty, dashed, solid]\n// number = [1, 2, 3]\n\nlet array = []\nfor (let i = 0; i < 81; i ++) {\n  array.push({\n    index: null,\n    color: null,\n    shape: null,\n    shade: null,\n    number: null\n  })\n}\n\n// Helper function\n\n\nconst colorsArray = [\"red\", \"purple\", \"green\"]\nconst shapesArray = [\"oval\", \"diamond\", \"squiggle\"]\nconst shadesArray = [\"empty\", \"dashed\", \"solid\"]\nconst numbersArray = [1,2,3]\n// Populating color\nfor (let i = 0; i < 81; i ++) {\n  if (i >= 0 & i < 27) {\n    array[i].color = \"red\"\n  } else if (i >= 27 & i < 54) {\n    array[i].color = \"purple\"\n  } else {\n    array[i].color = \"green\"\n  }\n}\n\n// Populating shapes\nfor (let i = 0; i < colorsArray.length; i++) {\n  array.filter(x => x.color === colorsArray[i]).forEach((x, idx) => {\n    if (idx >= 0 && idx < 9) {\n      x.shape = \"oval\"\n    } else if (idx >= 9 && idx < 18) {\n      x.shape = \"diamond\"\n    } else {\n      x.shape = \"squiggle\"\n    }\n  })\n}\n\n// Populating shades\nfor (let i = 0; i < colorsArray.length; i++) {\n  for (let j = 0; j < shapesArray.length; j++) {\n    array.filter(x => x.color === colorsArray[i] && x.shape === shapesArray[j]).forEach((x, idx) => {\n      if (idx >= 0 && idx < 3) {\n        x.shade = \"empty\"\n      } else if (idx >= 3 && idx < 6) {\n        x.shade = \"dashed\"\n      } else {\n        x.shade = \"solid\"\n      }\n    })\n  }\n}\n\n// Populating numbers\nfor (let i = 0; i < colorsArray.length; i++) {\n  for (let j = 0; j < shapesArray.length; j++) {\n    for (let k = 0; k < shadesArray.length; k++) {\n      array.filter(x => x.color === colorsArray[i] && x.shape === shapesArray[j] && x.shade === shadesArray[k]).forEach((x, idx) => {\n        if (idx === 0) {\n          x.number = 1\n        } else if (idx === 1) {\n          x.number = 2\n        } else {\n          x.number = 3\n        }\n      })\n    }\n  }\n}\n\n// Finally...populating indexes\nfor (let i = 0; i < 81; i++) {\n  array[i].index = Math.random()\n}\n\n// We do some manual tests to check if we actually correctly generated\n\n// Let's pick 5 possible card combinations to test\n// We can actually choose an arbitrary number\n\nlet checkSet = (numberToTest) => {\n  let testCombo = []\n  let results = []\n  let chooseRandomNumber = () => {\n    return Math.floor(Math.random()*3)\n  }\n\n  for (let i = 0; i < numberToTest; i++) {\n    testCombo.push({\n      color: colorsArray[chooseRandomNumber()],\n      shape: shapesArray[chooseRandomNumber()],\n      shade: shadesArray[chooseRandomNumber()],\n      number: numbersArray[chooseRandomNumber()]\n    })\n  }\n\n  for (let i = 0; i < numberToTest; i++) {\n    results.push(array.filter(x => x.color === testCombo[i].color && x.shape === testCombo[i].shape && x.shade === testCombo[i].shade && x.number === testCombo[i].number).length)\n  }\n\n  if (results.reduce((prev, curr) => prev + curr) === numberToTest) {\n    console.log('Success! :)')\n  } else {\n    console.log('Oh no! :(')\n  }\n}\n\n// Sort the array but index\nlet sortSet = (a,b) => {\n  if (a.index < b.index) return -1\n  if (a.index > b.index) return 1\n  return 0\n}\narray = array.sort(sortSet)\n\n// Done in creating the array! Phew!!!!\n\nexport default array\n","import React, { Component } from 'react';\nimport './App.css';\n\nimport array from './components/Model'\nimport Card from './components/Card'\n\nclass App extends Component {\n  render() {\n    console.log(array) \n    return (\n      <div className=\"App\">\n        {array[0].color}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}